clusterlouvain=cluster_resolution(neta.bp1,t=1.7)
#clusterlouvain <- cluster_fast_greedy(neta.bp1)
cluster0=clusterlouvain$membership
x1=as_adjacency_matrix(neta.bp1,attr = "weight",sparse = T)
#snn_graph <- graph_from_adjacency_matrix(x1, weighted = NULL)
#cluster0=leiden::leiden(neta.bp1,resolution_parameter=1.1,n_iterations=-1,seed=10)
#table(cluster0)
names(cluster0)=V(neta.bp1)$name
cluster0=group_single(cluster0,neta.bp1)
set.seed(10)
V(neta.bp1)$size=5
V(neta.bp1)$frame.color=NA
g=neta.bp1
E(g)$color=col_fun(z1)
E(g)$width=z1/max(z1)*2 # [1-6]
plot(g,layout=layout_nicely,vertex.color=rainbow(length(unique(cluster0)), alpha=0.6)[as.numeric(cluster0)])
DT::datatable(data.frame(Nodeid=V(g)$label,Name=names(V(g)),ClusterID=clusterlouvain$membership),options=list(dom='Bfrtip',buttons=c("copy","excel")),rownames = F)
data0final=as.data.frame(cbind(ends(g,E(g),name=F),ends(g,E(g),name=T)))
colnames(data0final)=c("from_ID","to_ID","from_name","to_name")
data0final$from_cluster=plyr::mapvalues(data0final$from_name,names(V(g)),clusterlouvain$membership)
data0final$to_cluster=plyr::mapvalues(data0final$to_name,names(V(g)),clusterlouvain$membership)
data0final$weight=z1
DT::datatable(data0final,extensions = "Buttons",options=list(dom='Bfrtip',buttons=c("copy","excel")))
op=par(mfrow=c(2,5))
xx=sort(unique(cluster0))
g_list=lapply(xx,function(x) {
g0=induced_subgraph(neta.bp1,vids=names(cluster0)[cluster0==x])
if(length(names(V(g0)))>50){
E(g0)$width=0.1
V(g0)$size=10
}else if (length(names(V(g0)))>20){
E(g0)$width=0.2
V(g0)$size=20
V(g0)$label.cex=1.5
}else{
E(g0)$width=1
V(g0)$size=30
V(g0)$label.cex=2
}
return(g0)
})
#x_fun=`%du%`
g0=do.call("disjoint_union",g_list)
#E(g0)$width=1
for(i in g_list){
set.seed(10)
plot(i)
}
par(op)
id_use0=data_all$PATIENT_VISITID_ENCRYPT[data_all$TREATING_RESULT_NAME%in%c("治愈","好转")]
xx=rbind(df_com_med_xy,df_com_med_zy)
xx=xx[xx$PATIENT_VISITID_ENCRYPT%in%id_use0,]
tmp0=sort(table(xx$ORDER_ITEM_NAME_L2),decreasing = T)
data0=get_data(xx,top = NULL)
data0=data0[rownames(data0)%in%names(tmp0)[tmp0>50],]
print(paste0("药的个数为:",dim(data0)[1]))
data0
dim(data0)
DT::datatable(data.frame(Nodeid=V(g)$label,Name=names(V(g)),ClusterID=cluster0),options=list(dom='Bfrtip',buttons=c("copy","excel")),rownames = F)
id_use0=data_all$PATIENT_VISITID_ENCRYPT[data_all$TREATING_RESULT_NAME%in%c("治愈","好转")]
xx=rbind(df_com_med_xy,df_com_med_zy)
xx=xx[xx$PATIENT_VISITID_ENCRYPT%in%id_use0,]
tmp0=sort(table(xx$ORDER_ITEM_NAME_L2),decreasing = T)
data0=get_data(xx,top = NULL)
data0=data0[rownames(data0)%in%names(tmp0)[tmp0>20],]
print(paste0("药的个数为:",dim(data0)[1]))
DT::datatable(data.frame(Freq=rowSums(get_data(xx,top = NULL))),extensions = "Buttons",options=list(dom='Bfrtip',buttons=c("copy","excel")))
neta <- graph_from_incidence_matrix(data0,weighted = NULL)# creat weights
neta.bp1 <- bipartite.projection(neta,which=c("FALSE"))
kill_name<-function(x) gsub(substr(x,1,3),'',x)
#labelname<-unlist(Map(kill_name,V(neta.bp1)$name))]
labelname=V(neta.bp1)$name
num_label<-data.frame(node=1:length(labelname),value=labelname)
V(neta.bp1)$label <-1:length(labelname)
V(neta.bp1)$shape <- "circle"
V(neta.bp1)$color="blue"
V(neta.bp1)$color[substr(labelname,1,2)=='西药'] <- "indianred1"
V(neta.bp1)$color[substr(labelname,1,2)=='中药'] <- "seagreen3"
#删除西药-西药
df0=cbind(as.data.frame(ends(neta.bp1,E(neta.bp1),names = T)),as.numeric(E(neta.bp1)$weight))
colnames(df0)=c("from","to","weight")
df0=cbind("drugID"=ends(neta.bp1,E(neta.bp1),names = F)[,1],df0)
df0=df0[order(df0$weight,decreasing = T),]
neta.bp1=neta.bp1%>%delete_edges(paste0(df0$V1,"|",df0$V2)[!(grepl("^西药",df0$V1) &grepl("^西药",df0$V1))])
#4: linetype, dotdash, 1: linetype, solid
z1=E(neta.bp1)$weight
col_fun =circlize::colorRamp2(range(z1), c("grey", "blue"))
width=5.9*(z1-min(z1))/(max(z1)-min(z1))+0.1 # [1-6]
E(neta.bp1)$width <- width
E(neta.bp1)$color=col_fun(z1)
#E(neta.bp1)$edge.color <- "dodgerblue"
# output the most frequen 前10个药物
# 计算每个顶点点的权重大小
DT::datatable(data.frame(Nodeid=V(g)$label,Name=names(V(g)),ClusterID=cluster0),options=list(dom='Bfrtip',buttons=c("copy","excel")),rownames = F)
data0final=as.data.frame(cbind(ends(g,E(g),name=F),ends(g,E(g),name=T)))
colnames(data0final)=c("from_ID","to_ID","from_name","to_name")
#data0final$from_cluster=plyr::mapvalues(data0final$from_name,names(V(g)),clusterlouvain$membership)
data0final$from_cluster=plyr::mapvalues(data0final$from_name,names(V(g)),cluster0)
data0final$to_cluster=plyr::mapvalues(data0final$to_name,names(V(g)),cluster0)
data0final$weight=z1
rm(list=ls())
knitr::opts_knit$set(root.dir="/Users/xiaokangyu/Desktop/问题 /榄香烯/std_data")
suppressMessages(library(dplyr))
suppressMessages(library(boot))
suppressMessages(library(Matrix))
suppressMessages(library(igraph))
suppressMessages(library(tidyr))
suppressMessages(library(arules))
suppressMessages(library(ggplot2))
suppressMessages(library(readxl))
suppressMessages(library(resolution))
rm(list=ls())
knitr::opts_knit$set(root.dir="/Users/xiaokangyu/Desktop/问题 /榄香烯/std_data")
suppressMessages(library(dplyr))
suppressMessages(library(boot))
suppressMessages(library(Matrix))
suppressMessages(library(igraph))
suppressMessages(library(tidyr))
suppressMessages(library(arules))
suppressMessages(library(ggplot2))
suppressMessages(library(readxl))
suppressMessages(library(resolution))
读取数据
#读取数据
setwd("/Users/xiaokangyu/Desktop/问题 /榄香烯/std_data")
DIAGNOSIS <- read.csv('DIAGNOSIS_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_DIAGNOSIS_ZY <- read.csv('FACT_DIAGNOSIS_ZY_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_INP_SETTLE_DETAIL <- read.csv('FACT_INP_SETTLE_DETAIL_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_INPATIENT_VISIT <- read.csv('FACT_INPATIENT_VISIT_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_LAB_RESULT <- read.csv('FACT_LAB_RESULT_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_ORDERS_with_class <- read.csv('FACT_ORDERS_with_class_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
#转化为频数表的函数
table_4<-function(x){
dat<-count(x)
dat <- dat[order(-dat[,2]),] ####
total<-length(x)
percent<-round(dat[,2]/total*100, 2)
dat1 <- as.matrix(cbind(dat,percent))
# dat1 <- cbind(1:nrow(dat1), dat1)
colnames(dat1)<-c("变量","频数","构成比(%)")
dat1
}
id_use1 <- DIAGNOSIS$PATIENT_VISITID_ENCRYPT[
grepl("C11",DIAGNOSIS$ICD_CODE)]
id_use2 <- DIAGNOSIS$PATIENT_VISITID_ENCRYPT[
grepl('鼻咽癌|鼻咽恶性肿瘤',DIAGNOSIS$DIAGNOSIS_NAME_L2)]
id_use <- unique(c(id_use1,id_use2))
filter_DIAGNOSIS=DIAGNOSIS[DIAGNOSIS$PATIENT_VISITID_ENCRYPT%in%id_use,]# 13915*21
filter_FACT_INP_SETTLE_DETAIL=FACT_INP_SETTLE_DETAIL[FACT_INP_SETTLE_DETAIL$PATIENT_VISITID_ENCRYPT%in%id_use,]
filter_FACT_INPATIENT_VISIT=FACT_INPATIENT_VISIT[FACT_INPATIENT_VISIT$PATIENT_VISITID_ENCRYPT%in%id_use,]#5610
filter_FACT_ORDERS_with_class=FACT_ORDERS_with_class[FACT_ORDERS_with_class$PATIENT_VISITID_ENCRYPT%in%id_use,]
merge_data=inner_join(filter_FACT_INPATIENT_VISIT,filter_FACT_ORDERS_with_class,by="PATIENT_VISITID_ENCRYPT")
merge_data=inner_join(merge_data,filter_DIAGNOSIS,by="PATIENT_VISITID_ENCRYPT")
#merge_data=inner_join(merge_data,FACT_INP_SETTLE_DETAIL,by="PATIENT_VISITID_ENCRYPT")
merge_data=merge_data%>%filter(SEX_NAME!="其它")
merge_data=merge_data[!is.na(merge_data$AGE),]
merge_data=merge_data[!duplicated(merge_data$PATIENT_VISITID_ENCRYPT),]# 1799例
merge_data=subset(merge_data,select=-c(ID.x,ROWID.x,PATIENT_VISITID.x,HospitalCode.x,ID.y,ROWID.y,PATIENT_VISITID.y,HospitalCode.y))
merge_data$TREATING_RESULT_NAME[merge_data$TREATING_RESULT_NAME=="其它"]="其他"
merge_data$TREATING_RESULT_NAME[merge_data$TREATING_RESULT_NAME!="治愈"& merge_data$TREATING_RESULT_NAME!="好转"&
merge_data$TREATING_RESULT_NAME!="无效"&!is.na(merge_data$TREATING_RESULT_NAME)&
merge_data$TREATING_RESULT_NAME!="NA"& merge_data$TREATING_RESULT_NAME!=""]="其他"
#merge_data$TREATING_RESULT_NAME=droplevels(merge_data$TREATING_RESULT_NAME)
data_all=merge_data
xy<- DIAGNOSIS[DIAGNOSIS$PATIENT_VISITID_ENCRYPT%in%id_use,]
zy<- FACT_DIAGNOSIS_ZY[FACT_DIAGNOSIS_ZY$PATIENT_VISITID_ENCRYPT %in% id_use,]
drug <- FACT_ORDERS_with_class[FACT_ORDERS_with_class$PATIENT_VISITID_ENCRYPT %in% id_use,]
#西医诊断
vars_xy_L2 <- c('PATIENT_VISITID_ENCRYPT','DIAGNOSIS_NAME_L2')
xy_DIAGNOSIS_L2 <- xy[,vars_xy_L2]
#中医证候
vars_zy <- c('PATIENT_VISITID_ENCRYPT', 'DISCHARGE_SYMPTOM_NAME_L2')
zy_sys_L2 <- zy[, vars_zy]
#合并西药
vars_xy <- c("PATIENT_VISITID_ENCRYPT", "ORDER_ITEM_NAME_L2", "lower_class", "top_class")
drug_xy <- drug[drug$top_class == "西药", vars_xy]
#合并中药
vars_zy <- c("PATIENT_VISITID_ENCRYPT", "ORDER_ITEM_NAME_L2", "lower_class", "top_class")
drug_zy <- drug[drug$top_class == "中药", vars_zy]
# 转换标准化数据
map_std=function(val,df_map,var1,var2){
#browser()
#val=droplevels(val)
res=as.character(val)
uni_val=unique(val)
cnt=0
for(i in uni_val){
# cnt=cnt+1
# print(i)
# if(cnt==149){
#   browser()
# }
if(sum(df_map[,var1]==i)!=0){
res[res==i]=as.character(df_map[,var2][df_map[,var1]==i])
}
}
#browser()
return(res)
}
map_std_xy=read.csv("/Users/xiaokangyu/Desktop/问题 /榄香烯/标准化1218(1)/鼻咽癌人群/合并西药.csv",fileEncoding = "GBK")
var1="变量"
var2="标准化名称"
drug_xy$ORDER_ITEM_NAME_L2=map_std(drug_xy$ORDER_ITEM_NAME_L2,map_std_xy,var1,var2)
#merge_data=merge_data[merge_data$ORDER_ITEM_NAME_L2!="剔除" | merge_data$ORDER_ITEM_NAME_L2!="删除" ,]
#merge_data=merge_data[merge_data$ORDER_ITEM_NAME_L2!="",]
drug_xy=drug_xy[!(drug_xy$ORDER_ITEM_NAME_L2=="剔除" | drug_xy$ORDER_ITEM_NAME_L2=="删除"| drug_xy$ORDER_ITEM_NAME_L2==""),]
map_std_zd=read.csv("/Users/xiaokangyu/Desktop/问题 /榄香烯/标准化1218(1)/鼻咽癌人群/合并中药.csv",fileEncoding = "GBK")
var1="变量"
var2="标准化名称"
drug_zy$ORDER_ITEM_NAME_L2=map_std(drug_zy$ORDER_ITEM_NAME_L2,map_std_zd,var1,var2)
#merge_data=merge_data[merge_data$ORDER_ITEM_NAME_L2!="剔除" | merge_data$ORDER_ITEM_NAME_L2!="删除" ,]
#merge_data=merge_data[merge_data$ORDER_ITEM_NAME_L2!="",]
drug_zy=drug_zy[!(drug_zy$ORDER_ITEM_NAME_L2=="剔除" | drug_zy$ORDER_ITEM_NAME_L2=="删除"| drug_zy$ORDER_ITEM_NAME_L2==""),]
#数据输出
# write.csv(xy_Lung_DIAGNOSIS_L2, file="西医诊断.csv", row.names = F)
# write.csv(zy_Lung_sys_L2, file="中医证候.csv", row.names = F)
# write.csv(drug_Lung_xy, file="合并西药.csv", row.names = F)
# write.csv(drug_Lung_zy, file="合并中药.csv",row.names = F)
# write.csv(table_4(xy_Lung_DIAGNOSIS_L2$DIAGNOSIS_NAME_L2), file="西医诊断.csv", row.names = F)
# write.csv(table_4(zy_Lung_sys_L2$DISCHARGE_SYMPTOM_NAME_L2), file="中医证候.csv", row.names = F)
# write.csv(table_4(drug_Lung_xy$ORDER_ITEM_NAME_L2), file="合并西药.csv", row.names = F)
# write.csv(table_4(drug_Lung_zy$ORDER_ITEM_NAME_L2), file="合并中药.csv",row.names = F)
# write.csv(table_4(drug_Lung_xy$lower_class), file = "合并西药类别.csv", row.names = F)
# write.csv(table_4(drug_Lung_zy$lower_class), file = "合并中药类别.csv", row.names = F)
# 西药
df_com_med_xy=drug_xy%>%
group_by(PATIENT_VISITID_ENCRYPT)%>%mutate(n=n())%>%ungroup()
df_com_med_xy=subset(df_com_med_xy,select=-c(lower_class,top_class))
df_com_med_xy$ORDER_ITEM_NAME_L2=paste0("西药.",df_com_med_xy$ORDER_ITEM_NAME_L2)
# 中药
df_com_med_zy=drug_zy%>%
group_by(PATIENT_VISITID_ENCRYPT)%>%mutate(n=n())%>%ungroup()
df_com_med_zy=subset(df_com_med_zy,select=-c(lower_class,top_class))
df_com_med_zy$ORDER_ITEM_NAME_L2=paste0("中药.",df_com_med_zy$ORDER_ITEM_NAME_L2)
DT::datatable(data.frame(Freq=rowSums(get_data(xx,top = NULL))),extensions = "Buttons",options=list(dom='Bfrtip',buttons=c("copy","excel")))
get_data=function(dat_long,top=100){
dat_long=as.data.frame(dat_long)
data0=as.matrix(table(dat_long[,1],dat_long[,2])!=0)# the first column is 患者编号,the second column is 药物名称或者药物类别
res=Matrix::Matrix(t(matrix(as.integer(data0),nrow(data0),ncol(data0),
dimnames = list(rownames(data0),colnames(data0)))),
sparse=T)# binary matrix
top_id=order(diag(res%*% t(res)),decreasing = T)[1:min(nrow(res),ifelse(is.null(top),nrow(res),top))]
res=res[top_id,]
return(res) # res 行是药物名称，列是患者编号
}
DT::datatable(data.frame(Freq=rowSums(get_data(xx,top = NULL))),extensions = "Buttons",options=list(dom='Bfrtip',buttons=c("copy","excel")))
#df_com_med_xy=df_com_med_xy[!,]
# length(grep("氯化钠",df_com_med_xy$ORDER_ITEM_NAME_L2))
df_com_med_xy=df_com_med_xy[!grepl("葡萄糖|氯化钠",df_com_med_xy$ORDER_ITEM_NAME_L2),]
xx=rbind(df_com_med_xy,df_com_med_zy)
tmp0=sort(table(xx$ORDER_ITEM_NAME_L2),decreasing = T)
data0=get_data(rbind(df_com_med_xy,df_com_med_zy),top = NULL)
data0=data0[rownames(data0)%in%names(tmp0)[tmp0>50],]
print(paste0("药的个数为:",dim(data0)[1]))
DT::datatable(data.frame(Freq=rowSums(get_data(xx,top = NULL))),extensions = "Buttons",options=list(dom='Bfrtip',buttons=c("copy","excel")))
neta <- graph_from_incidence_matrix(data0,weighted = NULL)# creat weights
neta.bp1 <- bipartite.projection(neta,which=c("false"))
kill_name<-function(x) gsub(substr(x,1,3),'',x)
#labelname<-unlist(Map(kill_name,V(neta.bp1)$name))]
labelname=V(neta.bp1)$name
num_label<-data.frame(node=1:length(labelname),value=labelname)
V(neta.bp1)$label <- as.character(1:length(labelname))
V(neta.bp1)$shape <- "circle"
V(neta.bp1)$color="orange"
V(neta.bp1)$color[substr(labelname,1,2)=='西药'] <- "orange"
V(neta.bp1)$color[substr(labelname,1,2)=='中药'] <- "seagreen3"
#删除西药-西药
df0=cbind(as.data.frame(ends(neta.bp1,E(neta.bp1),names = T)),as.numeric(E(neta.bp1)$weight))
colnames(df0)=c("from","to","weight")
df0=cbind("drugID"=ends(neta.bp1,E(neta.bp1),names = F)[,1],df0)
df0=df0[order(df0$weight,decreasing = T),]
neta.bp1=neta.bp1%>%delete_edges(paste0(df0$V1,"|",df0$V2)[!(grepl("^西药",df0$V1) &grepl("^西药",df0$V1))])
#4: linetype, dotdash, 1: linetype, solid
z1=E(neta.bp1)$weight
col_fun =circlize::colorRamp2(seq(range(z1)[1],range(z1)[2],length=200), colorRampPalette(c("grey", "blue"))(200))
width=5.9*(z1-min(z1))/(max(z1)-min(z1))+0.1 # [1-6]
#E(neta.bp1)$width <- width
#V(neta.bp1)$color=col_fun(z1)
group_single=function(ids,SNN){
singletons <- names(x = which(x = table(ids) == 1))
singletons <- intersect(x = unique(x = ids), singletons)
cluster_names <- as.character(x = unique(x = ids))
cluster_names <- setdiff(x = cluster_names, y = singletons)
connectivity <- vector(mode = "numeric", length = length(x = cluster_names))
names(x = connectivity) <- cluster_names
new.ids <- ids
for (i in singletons) {
i.cells <- names(which(ids == i))
for (j in cluster_names) {
j.cells <- names(which(ids == j))
subSNN <- SNN[i.cells, j.cells]
set.seed(1)
connectivity[j] <- mean(x = subSNN)
}
m <- max(connectivity, na.rm = T)
mi <- which(x = connectivity == m, arr.ind = TRUE)
closest_cluster <- sample(x = names(x = connectivity[mi]),
1)
ids[i.cells] <- closest_cluster
}
return(ids)
}
#clusterlouvain <- cluster_fast_greedy(neta.bp1)
set.seed(10)
d=1-similarity(neta.bp1, method = "jaccard", mode="all")
colnames(d)=rownames(d)=V(neta.bp1)$name
p1=hclust(as.dist(d),method="ward.D2")
cluster0=cutree(p1,k=3)
clusterlouvain=cluster_resolution(neta.bp1,t=1.7)
#clusterlouvain <- cluster_fast_greedy(neta.bp1)
cluster0=clusterlouvain$membership
x1=as_adjacency_matrix(neta.bp1,attr = "weight",sparse = T)
#snn_graph <- graph_from_adjacency_matrix(x1, weighted = NULL)
#cluster0=leiden::leiden(neta.bp1,resolution_parameter=1.1,n_iterations=-1,seed=10)
#table(cluster0)
names(cluster0)=V(neta.bp1)$name
cluster0=group_single(cluster0,neta.bp1)
set.seed(10)
V(neta.bp1)$size=5
V(neta.bp1)$frame.color=NA
g=neta.bp1
E(g)$color=col_fun(z1)
E(g)$width=z1/max(z1)*2 # [1-6]
plot(g,layout=layout_nicely,vertex.color=rainbow(length(unique(cluster0)), alpha=0.6)[as.numeric(cluster0)])
DT::datatable(data.frame(Nodeid=V(g)$label,Name=names(V(g)),ClusterID=clusterlouvain$membership),options=list(dom='Bfrtip',buttons=c("copy","excel")),rownames = F)
data0final=as.data.frame(cbind(ends(g,E(g),name=F),ends(g,E(g),name=T)))
colnames(data0final)=c("from_ID","to_ID","from_name","to_name")
data0final$from_cluster=plyr::mapvalues(data0final$from_name,names(V(g)),clusterlouvain$membership)
data0final$to_cluster=plyr::mapvalues(data0final$to_name,names(V(g)),clusterlouvain$membership)
data0final$weight=z1
DT::datatable(data0final,extensions = "Buttons",options=list(dom='Bfrtip',buttons=c("copy","excel")))
op=par(mfrow=c(2,5))
xx=sort(unique(cluster0))
g_list=lapply(xx,function(x) {
g0=induced_subgraph(neta.bp1,vids=names(cluster0)[cluster0==x])
if(length(names(V(g0)))>50){
E(g0)$width=0.1
V(g0)$size=10
}else if (length(names(V(g0)))>20){
E(g0)$width=0.2
V(g0)$size=20
V(g0)$label.cex=1.5
}else{
E(g0)$width=1
V(g0)$size=30
V(g0)$label.cex=2
}
return(g0)
})
#x_fun=`%du%`
g0=do.call("disjoint_union",g_list)
#E(g0)$width=1
for(i in g_list){
set.seed(10)
plot(i)
}
par(op)
rm(list=ls())
knitr::opts_knit$set(root.dir="/Users/xiaokangyu/Desktop/问题 /榄香烯/std_data")
suppressMessages(library(dplyr))
suppressMessages(library(boot))
suppressMessages(library(Matrix))
suppressMessages(library(igraph))
suppressMessages(library(tidyr))
suppressMessages(library(arules))
suppressMessages(library(ggplot2))
suppressMessages(library(readxl))
suppressMessages(library(resolution))
# 读取数据
setwd("/Users/xiaokangyu/Desktop/问题 /榄香烯/std_data")
DIAGNOSIS <- read.csv('DIAGNOSIS_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_DIAGNOSIS_ZY <- read.csv('FACT_DIAGNOSIS_ZY_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_INP_SETTLE_DETAIL <- read.csv('FACT_INP_SETTLE_DETAIL_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_INPATIENT_VISIT <- read.csv('FACT_INPATIENT_VISIT_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_LAB_RESULT <- read.csv('FACT_LAB_RESULT_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
FACT_ORDERS_with_class <- read.csv('FACT_ORDERS_with_class_std.csv', colClasses = c('PATIENT_VISITID_ENCRYPT'='character'),fileEncoding ="GBK")
#转化为频数表的函数
table_4<-function(x){
dat<-count(x)
dat <- dat[order(-dat[,2]),] ####
total<-length(x)
percent<-round(dat[,2]/total*100, 2)
dat1 <- as.matrix(cbind(dat,percent))
# dat1 <- cbind(1:nrow(dat1), dat1)
colnames(dat1)<-c("变量","频数","构成比(%)")
dat1
}
map_std_xy=read_xlsx("/Users/xiaokangyu/Desktop/问题 /榄香烯/标准化1218(1)/食道癌人群/合并西药.xlsx")
View(map_std_xy)
View(map_std_xy)
source("~/Desktop/benchmark _batch_effect/dataset8_read.R")
MouseBrain_sce <- SingleCellExperiment(assays = list(counts = expr_mat),
colData = metadata)
print(MouseBrain_sce)
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SingleCellExperiment)
library(scater)
library(ggplot2)
library(scran)
library(batchelor)
library(Seurat)
library(SeuratWrappers)
library(tidyverse)
library(patchwork)
library(cowplot)
library(SeuratDisk)
})
MouseBrain_sce <- SingleCellExperiment(assays = list(counts = expr_mat),
colData = metadata)
print(MouseBrain_sce)
saveRDS(MouseBrain_sce,file="./MouseBrain.rds")
install.packages("glmnet")
library(glmnet)
a=1
print("a=",a)
if(0){print(0)}else{print(12)}
tA=matrix(1:3,3,1)
tA
tA%*%3
class(tA)
tA1=matrix(1:12,3,4)
tA1
tA1%*%3
b=matrix(3,1,1)
b
tA*b
c(1,2,3)%*%3
crossprod(tA,3)
crossprod(tA)
b=3
tA%*%3
3%*%tA
tA1
3%*%tA1
tA1%*%3
rm(list=ls())
a=3
b=matrix(1:3,3,1)
b%*%a
a%*%b
d=c(1,2,3)
f=c(2,3,4)
d%*%f
d%*%3
3%*%d
g=t(c(1,2,3))
g
d
t(g)
c(1,2,3)
a=matrix(3)
a
c(1,2,3)%*%a
c(1,2,3)%*%3
a=matrix(3)
a
3%*%c(1,2,3)
c(1,2,3)%*%3
c(1,2,3)%*%marix(3)
c(1,2,3)%*%matrix(3)
matrix(3)%*%c(1,2,3)
n=1000000
paset0("aaa",_,n)
paste0("aaa",_,n)
paste0("aaa","_",n)
as.character(n)
type(n)
typeof(n)
n=integer(100000)
paste0("aaa","_",n)
paste("aaa","_",n)
as.character(10000000)
?as.character
format(1810032000, scientific = FALSE)
format(n, scientific = FALSE)
n
n=100000000
format(n, scientific = FALSE)
aa=format(n, scientific = FALSE)
paste0("aaa",'_',aa)
install.packages("networkD3")
install.packages("htmlwidgets")
packageVersion("Seurat")
library(Seurat)
packageVersion("Seurat")
getwd()
rm(list=ls())
setwd(getSrcDirectory()[1])
getwd()
rm(list=ls())
library(utils)
setwd(getSrcDirectory()[1])
getwd()
rm(list=ls())
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
setwd(system("pwd", intern = T) )
getwd()
rm(list=ls())
#setwd(system("pwd", intern = T) )
setwd("/Users/xiaokangyu/Desktop/scDML/scDML_project/BERMUDA/")
source("~/Desktop/scDML/scDML_project/BERMUDA/BERMUDA_preprocess.R")
source("~/Desktop/scDML/scDML_dataset/read_dataset.r")
source("~/Desktop/scDML/scDML_dataset/read_dataset.r")
source("~/Desktop/scDML/scDML_dataset/read_dataset.r")
source("~/Desktop/scDML/scDML_dataset/read_dataset.r")
a=NULL
if(a==NULL){print(123)}
if(is.null(a)){print(123)}
a=123
if(is.null(a)){print(123)}
